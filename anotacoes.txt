# Criar pasta wordpress_com_ansible
# Dentro da pasta wordpress_com_ansible criar o Vagrantfile

# Abrir o prompt e dentro da pasta wordpress_com_ansible executar o comando:
$ vagrant up

# Criar arquivo hosts e definir:
# [wordpress]
# 192.168.0.7

# Acessar VM wordpress via SSH
$ vagrant ssh

# Instalar ansible
$ sudo apt update
$ sudo apt upgrade
$ sudo apt install software-properties-common
$ sudo apt-add-repository ppa:ansible/ansible
# Enter
$ sudo apt update
$ sudo apt install ansible

# Checar versão
$ ansible --version

# Testando ansible
$ ansible wordpress -u vagrant --private-key .vagrant/machines/wordpress/virtualbox/private_key -i hosts -m shell -a 'echo Hello World!'

# Testando em modo verboso
$ ansible -vvvv wordpress -u vagrant --private-key .vagrant/machines/wordpress/virtualbox/private_key -i hosts -m shell -a 'echo Hello World!'

##################################################

# Criar Playbook
$ ansible-playbook provisioning.yml -u vagrant -i hosts --private-key .vagrant/machines/wordpress/virtualbox/private_key

# Acessar via ssh e visualizar o arquivo criado no diretório /vagrant
$ vagrant ssh
$ ls /vagrant

##################################################

# Adicionar a linha de configuração para a VM no arquivo playbook:
# Alterar playbook
---
- hosts: all
  tasks:
    - name: 'Instala o PHP5'
      apt: 
        name: php5
        state: latest
      become: yes
    - name: 'Instala o Apache2'
      apt:
        name: apache2
        state: latest
      become: yes
    - name: 'Instala o modphp'
      apt:
        name: libeapache2-mod-php5
        state: latest
      become: yes

# Instalar pacotes php5 e apache2 definido no playbook
$ ansible-playbook provisioning.yml -u vagrant -i hosts --private-key .vagrant/machines/wordpress/virtualbox/private_key

# Acessar o ip no navegador para testar o apache

##################################################

# Simplificando o script com with_itens
# Adicionar a linha de configuração para a VM no arquivo playbook:
# Alterar playbook
---
- hosts: all
  tasks:
    - name: 'Instala pacotes de dependência do sistema operacional'
      apt:
        name: "{{ item }}"
        state: latest
      become: yes
      with_itens:
        - php5
        - apache2
        - libeapache2-mod-php5
        - php5-gd
        - libssh2-php
        - php5-mcrypt
        - mysql-server-5.6
        - python-mysqldb
        - php5.mysql

##################################################

# Inserindo o nome do usuário e chave no arquivo de hosts
# 192.168.0.7 ansible_user=vagrant ansible_ssh_private_key_file="/Users/<seu usuario>/wordpress_com_ansible/..vagrant/machines/wordpress/vistualbox/private_key"

# Executando no terminal
$ $ ansible-playbook provisioning.yml -i hosts

##################################################

# Criando banco mysql no arquivo de hosts
# Adicionar a linha de configuração para a VM no arquivo playbook:
# Alterar playbook
- name: 'Cria o banco do MySQl'
      mysql_db: 
        name: wordpress_db
        login_user: root
      # login_password: (Aqui não será informada a senha pois nessa versão o padrão é criar login sem senha)
        state: present

# Executando no terminal
$ $ ansible-playbook provisioning.yml -i hosts

# Logando e testando
$ vagrant ssh
$ mysql -u root
$ show databases;
$ use wordpress_db;
$ show tables;
$ quit;

# Deletando banco mysql no arquivo de hosts
# Adicionar a linha de configuração para a VM no arquivo playbook:
# Alterar playbook
- name: 'Cria o banco do MySQl'
      mysql_db: 
        name: wordpress_db
        login_user: root
      # login_password: (Aqui não será informada a senha pois nessa versão o padrão é criar login sem senha)
        state: absent

# Executando no terminal
$ $ ansible-playbook provisioning.yml -i hosts

# Logando e testando
$ vagrant ssh
$ mysql -u root

##################################################

# Link da documentação do Ansible (v2.6) com a lista de todos os módulos de banco de dados:
# https://docs.ansible.com/ansible/2.6/modules/list_of_database_modules.html

# Link do módulo MySQL:
# https://docs.ansible.com/ansible/2.6/modules/mysql_db_module.html

##################################################

# Criando usuario mysql no arquivo de hosts
# Adicionar a linha de configuração para a VM no arquivo playbook:
# Alterar playbook
- name: 'Cria o usuário do MySQL'
      mysql_user: 
        login_user: root
        name: wordpress_user
        password: 12345
        priv: 'wordpress_db.*:ALL'
        state: present

# Executando no terminal
$ $ ansible-playbook provisioning.yml -i hosts

$ mysql -u root
$ show databases;
$ show tables;

# Testando usuário mysql
$ mysql -u wordpress_user -p
# inserir senha
$ show databases;

##################################################

# Configurando no arquivo de hosts o download  e descompactação do arquivo do wordpress
# Adicionar a linha de configuração para a VM no arquivo playbook:
# Alterar playbook
- name: 'Download do arquivo de instalação do Wordpress'
      get_url: 
        url: 'https://wordpress.org/latest.tar.gz'
        dest: '/tmp/wordpress.tar.gz'
        
    - name: 'Descompacta o arquivo'
      unarchive: 
        src: '/tmp/wordpress.tar.gz'
        dest: /var/www/
        remote_src: yes
      become: yes

# Executando no terminal
$ $ ansible-playbook provisioning.yml -i hosts

##################################################

# Configurando no arquivo de hosts a cópia do arquivo de um diretório para outro mudando o nome
# Adicionar a linha de configuração para a VM no arquivo playbook:
# Alterar playbook
- copy:
        src: '/var/www/wordpress/wp-config-sample.php'
        dest: '/var/www/wordpress/wp-config.php'
        remote_src: yes
      become: yes
    
    - name: 'Configura o wp-config com as entradas do banco de dados'
      replace:
        path: '/var/www/wordpress/wp-config.php'
        regexp: "{{ item.regex }}"
        replace: "{{ item.value }}"        
      with_itens:
        - { regex: 'database_name_here', value: 'wordpress_db'}
        - { regex: 'username_here', value: 'wordpress_use'}
        - { regex: 'password_here', value: 12345'}
      become: yes

# Criar wordpress_com_ansible/files/000-default.conf
# Adicionar a linha de configuração para a VM no arquivo playbook:
# Alterar playbook
# Configura Apache para servir o Wordpress
- hosts: all
  handlers:
    - name: restart apache
      service:
        name: apache2
        state: restarted
      become: yes



- name: 'Configura Apache para servir o Wordpress'
      copy:
        src: 'files/000-default.conf'
        dest: '/etc/apache2/sites-available/000-default.conf'
      become: yes
      notify:
        - restart apache

##################################################

# Criar outra VM para o MySQL
# Adicionar a linha de configuração para a VM no arquivo Vagrantfile:


config.vm.define "mysql" do |m|
        m.vm.network "public_network", ip: "192.168.0.9"
    end

# Inserindo o nome do usuário e chave da nova máquina no arquivo de hosts

[database]
172.17.177.42 ansible_user=vagrant ansible_ssh_private_key_file="/Users/marcoscropalato/wordpress_com_ansible/.vagrant/machines/mysql/virtualbox/private_key"

# Criando a máquina no vagrant
$ vagrant up mysql

# Criar nova configuração de máquina no playbook:
## inicio ##
# ---
# - hosts: all
#   tasks:
#     - shell: 'echo hello > /vagrant/world.txt'
---
- hosts: database
  tasks:

    - name: 'Instala pacotes de dependência do sistema operacional'
      apt:
        name: "{{ item }}"
        state: latest
      become: yes
      with_itens:
        - mysql-server-5.6
        - python-mysqldb
    - name: 'Cria o banco do MySQl'
          mysql_db: 
            name: wordpress_db
            login_user: root
          # login_password: (Aqui não será informada a senha pois nessa versão o padrão é criar login sem senha)
            state: present

        - name: 'Cria o usuário do MySQL'
          mysql_user: 
            login_user: root
            name: wordpress_user
            password: 12345
            priv: 'wordpress_db.*:ALL'
            state: present

- hosts: wordpress
  handlers:
    - name: restart apache
      service:
        name: apache2
        state: restarted
      become: yes

  tasks:
    - name: 'Instala pacotes de dependência do sistema operacional'
      apt:
        name: "{{ item }}"
        state: latest
      become: yes
      with_itens:
        - php5
        - apache2
        - libeapache2-mod-php5
        - php5-gd
        - libssh2-php
        - php5-mcrypt
        - mysql-server-5.6
        - python-mysqldb
        - php5.mysql

    - name: 'Cria o banco do MySQl'
      mysql_db: 
        name: wordpress_db
        login_user: root
      # login_password: (Aqui não será informada a senha pois nessa versão o padrão é criar login sem senha)
        state: present

    - name: 'Cria o usuário do MySQL'
      mysql_user: 
        login_user: root
        name: wordpress_user
        password: 12345
        priv: 'wordpress_db.*:ALL'
        state: present

    - name: 'Download do arquivo de instalação do Wordpress'
      get_url: 
        url: 'https://wordpress.org/latest.tar.gz'
        dest: '/tmp/wordpress.tar.gz'
        
    - name: 'Descompacta o arquivo'
      unarchive: 
        src: '/tmp/wordpress.tar.gz'
        dest: /var/www/
        remote_src: yes
      become: yes

    - copy:
        src: '/var/www/wordpress/wp-config-sample.php'
        dest: '/var/www/wordpress/wp-config.php'
        remote_src: yes
      become: yes
    
    - name: 'Configura o wp-config com as entradas do banco de dados'
      replace:
        path: '/var/www/wordpress/wp-config.php'
        regexp: "{{ item.regex }}"
        replace: "{{ item.value }}"        
      with_itens:
        - { regex: 'database_name_here', value: 'wordpress_db'}
        - { regex: 'username_here', value: 'wordpress_use'}
        - { regex: 'password_here', value: 12345'}
      become: yes

    - name: 'Configura Apache para servir o Wordpress'
      copy:
        src: 'files/000-default.conf'
        dest: '/etc/apache2/sites-available/000-default.conf'
      become: yes
      notify:
        - restart apache
## fim ##

# Executando no terminal
$ $ ansible-playbook provisioning.yml -i hosts

##################################################

# Remover todas as linhas referente a instalação de banco de dados no wordpress no arquivo de playbook
# Destroi máquina virtual wordpress
$ vagrant destroy -f wordpress

# Cria nova máquina wordpress
$ vagrant up wordpress

# Executando no terminal
$ $ ansible-playbook provisioning.yml -i hosts

# Acessa o ip no navegador

# Copia o conteúdo do arquivo de configuração
$ cat /etc/mysql/my.cnf

# Cria o arquivo my.cnf na pasta files
# Modifica a entrada bind-address   = 127.0.0.1 para bind-address   = 0.0.0.0

# Executando no terminal
$ $ ansible-playbook provisioning.yml -i hosts

# Acessa o ip no navegador

##################################################

# Criar variáveis:
# Substituir wordpress_db por "{{ wp_db_name }}"

# Executando no terminal
$ $ ansible-playbook provisioning.yml -i hosts

# Validando alteração
$ ansible-playbook -i hosts --extra-vars 'wp_db_name=wordpress_db' provisioning.yml

# Substituir wordpress_user por {{ wp_username }}

# Validando alteração
$ ansible-playbook -i hosts --extra-vars 'wp_db_name=wordpress_db wp_username=wordpress_user' provisioning.yml

# Criar diretório group_vars/all.yml

# Adicionar variáveis nele:
---
wp_username: wordpress_user
wp_db_name: wordpress_db
wp_user_password: 12345
wp_installation_dir: '/var/www/wordpress'
wp_host_ip: '192.168.0.7'
wp_db_ip: '192.168.0.9'

# Executando no terminal
$ $ ansible-playbook provisioning.yml -i hosts

# Criar diretório group_vars/database.yml e colar wp_db_ip: '192.168.0.9'

# Criar diretório group_vars/wordpress.yml e colar wp_host_ip: '192.168.0.7'

# Executando no terminal
$ $ ansible-playbook provisioning.yml -i hosts

##################################################

# Criar diretório wordpress_com_ansible/templates e mover o arquivo 000-default.conf nomeando-o para 000-default.conf.j2

# Nesse arquivo alterar DocumentRoot /var/www/wordpress para DocumentRoot {{ wp_installation_dir }}

# Executando no terminal
$ $ ansible-playbook provisioning.yml -i hosts

##################################################

# Documentação sobre Variáveis -> http://docs.ansible.com/ansible/latest/playbooks_variables.html#what-makes-a-valid-variable-name


# Criar um grupo de três roles:

# Uma será responsável por instalar o Webserver;
# Uma para instalar o MySQL;
# E uma para instalar o Wordpress.

# roles/mysql/files
# roles/mysql/handlers
# roles/mysql/tasks
# roles/Webserver/tasks/main.yml
# roles/wordpress/handlers/main.yml
# roles/wordpress/tasks/main.yml
# roles/wordpress/templates/000-default.conf.j2

##################################################

# roles/mysql/defaults/main.yml
# roles/wordpress/meta/main.yml